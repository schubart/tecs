/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Input for A register: Instruction (if A-instruction) or previous
    // ALU output (if C-instruction).
    Mux16(a=instruction,
          b=outALU,
          sel=instruction[15], // MSB of instruction: A- or C-instruction.
          out=inA);

    // A register. Load if A-instruction or C-instruction with d1 set
    // in dest field.
    Not(in=instruction[15],
        out=isAInstruction);
    Or(a=isAInstruction,
       b=instruction[5], // d1 of dest of C-instruction (store in A).
       out=loadA);
    ARegister(in=inA,
              load=loadA,
              out=outA, out[0..14]=addressM);

    // D register. Load if C-instruction with d2 set in dest field.
    And(a=instruction[15], // C-instruction
        b=instruction[4],  // d2 of dest of C-instruction (store in D).
        out=loadD);
    DRegister(in=outALU,
              load=loadD,
              out=outD);

    // y input for ALU: A register or inM, depending on a bit in comp field
    // of C-instruction. (If A-instruction, this choice does not matter.)
    Mux16(a=outA,
          b=inM,
          sel=instruction[12], // a of comp of C-instruction.
          out=inALUY);

    // ALU. Control bits "zx" to "no" correspond to c1 to c6 of comp field
    // of C-instruction. (If A-instruction, this choice does not matter.)
    ALU(x=outD,
        y=inALUY,
        zx=instruction[11], // c1 of comp of C-instruction.
        nx=instruction[10], // c2 of comp of C-instruction.
        zy=instruction[9],  // c3 of comp of C-instruction.
        ny=instruction[8],  // c4 of comp of C-instruction.
         f=instruction[7],  // c5 of comp of C-instruction.
        no=instruction[6],  // c6 of comp of C-instruction.
        out=outM, out=outALU,
        zr=zr,
        ng=ng);

    // writeM if C-instruction with d3 set in dest field.
    And(a=instruction[15], // C-instruction,
        b=instruction[3],  // d3 of dest of C-instruction (store in memory).
        out=writeM);

   // PC. Load if jump, i.e. zr/ng match conditions of j1..j3 of jump
   // field of C-instruction. inc if not load. reset if reset.
   Not(in=zr, out=notZR);
   Not(in=ng, out=notNG);
   And(a=notZR, b=notNG, out=isPositive);

   And(a=instruction[2], // j1 of jump of C-instruction.
       b=ng,
       out=jumpNegative);
   And(a=instruction[1], // j2 of jump of C-instruction.
       b=zr,
       out=jumpZero);
   And(a=instruction[0], // j3 of jump of C-instruction.
       b=isPositive,
       out=jumpPositive);

   Or8Way(in[0]=jumpNegative,
          in[1]=jumpZero,
          in[2]=jumpPositive,
          out=jumpIfCInstruction);

   And(a=instruction[15], // C-instruction
       b=jumpIfCInstruction,
       out=jump);

   // Shortcut: Always set inc to true because load has precedence.
   PC(in=outA,
      load=jump,
      inc=true,
      reset=reset,
      out[0..14]=pc);
}

