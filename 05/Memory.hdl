/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address.  This value becomes
 * available through the out output starting from the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000 to  0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications.
 */

CHIP Memory {

    // 000 0000 0000 0000 - 0x0000 Start RAM
    // 100 0000 0000 0000 - 0x4000 Start Screen
    // 110 0000 0000 0000 - 0x6000 Keyboard

    IN  in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Decide who should get the load signal.
    DMux(in=load, sel=address[14], a=a, b=b);

    RAM16K(in=in, load=a, address=address[0..13], out=outRAM);
    Screen(in=in, load=b, address=address[0..12], out=outScreen);
    Keyboard(out=outKeyboard);

    // Decide who should provide the output.
    // A bit sloppy: They keyboard is not just mapped to 0x6000 but to
    // all addresses upto and including 0x7FFF.
    Mux4Way16(a=outRAM,
              b=outRAM,
              c=outScreen,
              d=outKeyboard,
              sel=address[13..14],
              out=out);
}
