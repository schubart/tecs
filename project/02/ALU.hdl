/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
    // internalX: x nulled and/or inverted.
    Mux16(a=x, b=false, sel=zx, out=zeroX);
    Not16(in=zeroX, out=notZeroX);
    Mux16(a=zeroX, b=notZeroX, sel=nx, out=internalX);

    // internalY: y nulled and/or inverted.
    Mux16(a=y, b=false, sel=zy, out=zeroY);
    Not16(in=zeroY, out=notZeroY);
    Mux16(a=zeroY, b=notZeroY, sel=ny, out=internalY);

    // And-ing and adding internal x and y.
    And16(a=internalX, b=internalY, out=and);
    Add16(a=internalX, b=internalY, out=add);

    // Choosing between added and and-ed result.
    Mux16(a=and, b=add, sel=f, out=andOrAdd);

    // Optionally inverting result.
    Not16(in=andOrAdd, out=notAndOrAdd);
    // Connecting out to "out" of this chip, and highest bit to "ng" of
    // this chip. Also to some internal pins for testing zero.
    Mux16(a=andOrAdd, b=notAndOrAdd, sel=no, out=out, out[15]=ng, out=outDupe);

    // Test for zero.
    Or16Way(in=outDupe, out=outSomeBit);
    Not(in=outSomeBit, out=zr);
}
