/**
 * Memory of 4K registers, each 16-bit wide.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM4K[address(t)](t)
 *     Write: If load(t-1) then RAM4K[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address.  This value becomes
 * available through the out output starting from the next time step.
 */

CHIP RAM4K {

    IN  in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Decide which memory bank should get the load signal.
    DMux8Way(in=load, sel=address[9..11],
             a=a, b=b, c=c, d=d,
             e=e, f=f, g=g, h=h);

    // All memory banks get the same input, only one gets a load signal.
    RAM512(in=in, load=a, address=address[0..8], out=out0);
    RAM512(in=in, load=b, address=address[0..8], out=out1);
    RAM512(in=in, load=c, address=address[0..8], out=out2);
    RAM512(in=in, load=d, address=address[0..8], out=out3);
    RAM512(in=in, load=e, address=address[0..8], out=out4);
    RAM512(in=in, load=f, address=address[0..8], out=out5);
    RAM512(in=in, load=g, address=address[0..8], out=out6);
    RAM512(in=in, load=h, address=address[0..8], out=out7);

    // Descide which memory bank should provide the output.
    Mux8Way16(a=out0, b=out1, c=out2, d=out3,
              e=out4, f=out5, g=out6, h=out7,
              sel=address[9..11],
              out=out);
}
